-- Se habilita la implementación de claves foráneas --
PRAGMA foreign_keys = ON;

-- Creación de tablas --

-- Crea la tabla para los medios de pago.
CREATE TABLE IF NOT EXISTS medio_de_pago (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  nombre TEXT NOT NULL
);

-- Crea la tabla para los tipos de producto.
CREATE TABLE IF NOT EXISTS tipo_producto (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  nombre TEXT NOT NULL
);

-- Crea la tabla de roles.
CREATE TABLE IF NOT EXISTS rol (
  id INTEGER PRIMARY KEY NOT NULL,
  tipo TEXT,
  comisiones INTEGER
);

-- Crea la tabla de boletas (Debe ser creada después de la de medios de pago).
CREATE TABLE IF NOT EXISTS boleta (
  n_serial INTEGER PRIMARY KEY NOT NULL,
  estado TEXT,
  fecha TEXT,
  monto INTEGER,
  medio_de_pago_id INTEGER,
  FOREIGN KEY (medio_de_pago_id) REFERENCES medio_de_pago(id)
);

-- Crea la tabla de productos (Debe ser creada después de la de tipo de productos).
CREATE TABLE IF NOT EXISTS producto (
  id INTEGER PRIMARY KEY NOT NULL,
  nombre TEXT,
  descripcion TEXT,
  cantidad INTEGER,
  precio INTEGER,
  tipo_id INTEGER,
  FOREIGN KEY (tipo_id) REFERENCES tipo_producto(id)
);

-- Crea la tabla de clientes.
CREATE TABLE IF NOT EXISTS cliente (
  rut TEXT PRIMARY KEY NOT NULL,
  nombre TEXT,
  apellido TEXT,
  direccion TEXT,
  telefono INTEGER
);

-- Crea la tabla de empleados (Debe ser creada después de la de roles).
CREATE TABLE IF NOT EXISTS empleado (
  rut TEXT PRIMARY KEY NOT NULL,
  nombre1 TEXT,
  nombre2 TEXT,
  apellido1 TEXT,
  apellido2 TEXT,
  direccion TEXT,
  sueldo_actual INTEGER,
  telefono INTEGER,
  rol_id INTEGER,
  FOREIGN KEY (rol_id) REFERENCES rol(id)
);

-- Crea la tabla de órdenes (Debe ser creada después de la de boletas, la de clientes y la de empleados).
CREATE TABLE IF NOT EXISTS orden(
  id INTEGER PRIMARY KEY NOT NULL,
  estado TEXT,
  boleta_n_serial INTEGER NOT NULL,
  cliente_rut TEXT NOT NULL,
  empleado_rut TEXT NOT NULL,
  FOREIGN KEY (boleta_n_serial) REFERENCES boleta(n_serial),
  FOREIGN KEY (cliente_rut) REFERENCES cliente(rut),
  FOREIGN KEY (empleado_rut) REFERENCES empleado(rut)
);

-- Crea la tabla de ingredientes.
CREATE TABLE IF NOT EXISTS ingrediente (
  id INTEGER PRIMARY KEY NOT NULL,
  nombre TEXT,
  descripcion TEXT,
  cantidad INTEGER
);

-- Crea la tabla de reservas (Debe ser creada después de la de órdenes).
CREATE TABLE IF NOT EXISTS reserva (
  id INTEGER NOT NULL,
  hora_busqueda TEXT,
  estado TEXT,
  orden_id INTEGER NOT NULL,
  PRIMARY KEY (id, orden_id),
  FOREIGN KEY (orden_id) REFERENCES orden(id)
);

-- Crea la tabla de repartos (Debe ser creada después de la de empleados y la de órdenes).
CREATE TABLE IF NOT EXISTS reparto (
  id INTEGER PRIMARY KEY NOT NULL,
  estado TEXT,
  indicaciones TEXT,
  fecha_salida TEXT,
  fecha_llegada TEXT,
  empleado_rut TEXT NOT NULL,
  orden_id INTEGER NOT NULL,
  FOREIGN KEY (empleado_rut) REFERENCES empleado(rut),
  FOREIGN KEY (orden_id) REFERENCES orden(id)
);

-- Crea la tabla de proveedores.
CREATE TABLE IF NOT EXISTS proveedor (
  id INTEGER PRIMARY KEY NOT NULL,
  nombre TEXT,
  telefono TEXT,
  contacto TEXT
);

-- Crea la tabla de registros de sueldo (Debe ser creada después de la de empleados).
CREATE TABLE IF NOT EXISTS registro_sueldo (
  id INTEGER PRIMARY KEY NOT NULL,
  fecha TEXT,
  monto INTEGER,
  empleado_rut TEXT NOT NULL,
  FOREIGN KEY (empleado_rut) REFERENCES empleado(rut)
);

-- Crea la tabla de lineas de orden (Debe ser creada después de la de productos y la de órdenes).
CREATE TABLE IF NOT EXISTS linea_orden (
  id INTEGER PRIMARY KEY NOT NULL,
  orden_id INTEGER NOT NULL,
  producto_id INTEGER NOT NULL,
  cantidad INTEGER,
  precio_unitario INTEGER,
  FOREIGN KEY (producto_id) REFERENCES producto(id),
  FOREIGN KEY (orden_id) REFERENCES orden(id)
);

-- Crea la tabla que asocia a los empleados con los productos preparados (Debe ser creada después de la de productos y la de empleados).
CREATE TABLE IF NOT EXISTS empleado_prepara_producto (
  id INTEGER PRIMARY KEY NOT NULL,
  producto_id INTEGER NOT NULL,
 empleado_rut TEXT NOT NULL,
  fecha TEXT,
  FOREIGN KEY (producto_id) REFERENCES producto(id),
  FOREIGN KEY (empleado_rut) REFERENCES empleado(rut)
);

-- Crea la tabla que asocia a los ingredientes con sus proveedores (Debe ser creada después de la de productos y la de proveedores).
CREATE TABLE IF NOT EXISTS ingrediente_por_proveedor (
  ingrediente_id INTEGER NOT NULL,
  proveedor_id INTEGER NOT NULL,
  FOREIGN KEY (ingrediente_id) REFERENCES ingrediente(id),
  FOREIGN KEY (proveedor_id) REFERENCES proveedor(id)
);

-- Crea la tabla que asocia a los ingredientes con su respectivo producto (Debe ser creada después de la de productos y la de ingredientes).
CREATE TABLE IF NOT EXISTS ingrediente_por_producto (
  producto_id INTEGER NOT NULL,
  ingrediente_id INTEGER NOT NULL,
  FOREIGN KEY (producto_id) REFERENCES producto(id),
  FOREIGN KEY (ingrediente_id) REFERENCES ingrediente(id)
);

-- Inserción de datos --

-- Como hay valores estáticos para los medios de pago, se agregan.
INSERT INTO medio_de_pago (nombre) VALUES ("Efectivo"), ("Débito"), ("Crédito"), ("Transferencia");

-- Como hay valores estáticos para los tipos de producto, se agregan.
INSERT INTO tipo_producto (nombre) VALUES ("Preparado"), ("Congelado"), ("Bebida"), ("Empaquetado");

-- Como hay valores estáticos para los roles, se agregan.
INSERT INTO rol (id, tipo, comisiones)
VALUES
(1, "Cajero", 1000),
(2, "Repartidor", 1500),
(3, "Chef", 2000);

-- Se agregan boletas hipotéticas a la tabla de boletas.
INSERT INTO boleta (n_serial, estado, fecha, monto, medio_de_pago_id)
VALUES
(10001, "Pagada", "2023-07-01", 10500, 1),
(10002, "Pagada", "2023-07-02", 15500, 2),
(10003, "Pendiente", "2023-07-03", 20500, 3);

-- Se agregan productos hipotéticos a la tabla de productos.
INSERT INTO producto (id, nombre, descripcion, cantidad, precio, tipo_id)
VALUES
(1, "Pizza Margarita", "Pizza con tomate, queso y albahaca", 20, 5000, 1),
(2, "Empanada de queso", "Empanada horneada de queso", 50, 1000, 1),
(3, "Jugo natural de naranja", "Jugo exprimido de naranja natural", 30, 1500, 3);

-- Se agregan personas hipotéticas a la tabla de clientes.
INSERT INTO cliente (rut, nombre, apellido, direccion, telefono) 
VALUES 
("12345678-9", "Juan", "Pérez", "Calle Falsa 123", 123456789), 
("23456789-0", "María", "González", "Avenida Siempre Viva 456", 234567890), 
("34567890-1", "Carlos", "Rodríguez", "Paseo Ahumada 789", 345678901);

-- Se agregan empleados hipotéticos a la tabla de empleados.
INSERT INTO empleado (rut, nombre1, nombre2, apellido1, apellido2, direccion, sueldo_actual, telefono, rol_id)
VALUES
("98765432-1", "Roberto", "Andrés", "Muñoz", "Fuentes", "Boulevard 123", 850000, 987654321, 1),
("87654321-2", "Ana", "María", "Gutiérrez", "Soto", "Pasaje 456", 950000, 876543212, 2),
("76543210-3", "Fernando", "José", "Alarcón", "Vega", "Avenida 789", 1050000, 765432103, 3);

-- Se agregan órdenes hipotéticas a la tabla de órdenes.
INSERT INTO orden (id, estado, boleta_n_serial, cliente_rut, empleado_rut)
VALUES
(1, "Preparando", 10001, "12345678-9", "98765432-1"),
(2, "Enviado", 10002, "23456789-0", "98765432-1"),
(3, "Entregado", 10003, "34567890-1", "98765432-1");

-- Se agregan ingredientes hipotéticos a la tabla de ingredientes.
INSERT INTO ingrediente (id, nombre, descripcion, cantidad)
VALUES
(1, "Tomate", "Tomate fresco", 30),
(2, "Queso", "Queso mozzarella", 20),
(3, "Albahaca", "Albahaca fresca", 15);

-- Se agregan reservas hipotéticas a la tabla de reservas.
INSERT INTO reserva (id, hora_busqueda, estado, orden_id)
VALUES
(1, "09:00:00", "Activa", 1),
(2, "13:00:00", "Activa", 2),
(3, "18:00:00", "Activa", 3);

-- Se agregan repartos hipotéticos a la tabla de repartos.
INSERT INTO reparto (id, estado, indicaciones, fecha_salida, fecha_llegada, empleado_rut, orden_id)
VALUES
(1, "En camino", "Entregar en portería", "2023-07-01 10:00:00", "2023-07-01 11:00:00", "87654321-2", 1),
(2, "Entregado", "Llamar al llegar", "2023-07-02 14:00:00", "2023-07-02 14:30:00", "87654321-2", 2),
(3, "En camino", "Edificio azul", "2023-07-03 19:00:00", NULL, "87654321-2", 3);

-- Se agregan proveedores hipotéticos a la tabla de proveedores.
INSERT INTO proveedor (id, nombre, telefono, contacto)
VALUES
(1, "Proveedor Frutas", "12345678", "pedro.perez@gmail.com"),
(2, "Proveedor Carnes", "23456789", "maria.gonzalez@yahoo.es"),
(3, "Proveedor Lácteos", "34567890", "juan.rodriguez@ufro.cl");

-- Se agregan registros de sueldo hipotéticos a la tabla de registros de sueldo.
INSERT INTO registro_sueldo (id, fecha, monto, empleado_rut)
VALUES
(1, "2023-06-30", 850000, "98765432-1"),
(2, "2023-06-30", 950000, "87654321-2"),
(3, "2023-06-30", 1050000, "76543210-3");

-- Se agregan lineas de órden hipotéticas a la tabla de lineas de órden.
INSERT INTO linea_orden (id, orden_id, producto_id, cantidad, precio_unitario)
VALUES
(1, 1, 1, 2, 5000),
(2, 2, 2, 3, 1000),
(3, 3, 3, 1, 1500);

-- Se agregan registros de empleados preparando productos a la tabla de empleado prepara producto.
INSERT INTO empleado_prepara_producto (id, producto_id, empleado_rut, fecha)
VALUES
(1, 1, "76543210-3", "2023-07-01"),
(2, 2, "76543210-3", "2023-07-02"),
(3, 3, "76543210-3", "2023-07-03");

-- Se agregan registros de ingredientes por proveedor a la tabla de ingrediente por proveedor.
INSERT INTO ingrediente_por_proveedor (ingrediente_id, proveedor_id)
VALUES
(1, 1),
(2, 2),
(3, 3);

-- Se agregan registros de ingredientes por producto a la tabla de ingredientes por producto.
INSERT INTO ingrediente_por_producto (producto_id, ingrediente_id)
VALUES
(1, 1),
(1, 2),
(1, 3),
(2, 2);

-- Creación de índices --

-- Se crea un índice para optimizar la búsqueda de productos por nombre.
CREATE INDEX idx_producto_nombre ON producto(nombre);

-- Se crea un índice para optimizar la búsqueda de clientes por rut.
CREATE INDEX idx_cliente_rut ON cliente(rut);

-- Se crea un índice para optimizar la búsqueda de orden por estado.
CREATE INDEX idx_orden_estado ON orden(estado);

-- Consultas simples --

-- Selecciona todos los productos.
SELECT * FROM producto;

-- Selecciona todos los clientes.
SELECT * FROM cliente;

-- Selecciona todas las órdenes preparadas.
SELECT * FROM orden WHERE estado = 'Preparado';

-- Selecciona todos los productos con un precio mayor a 5000.
SELECT * FROM producto WHERE precio > 5000;

-- Selecciona todas las boletas con un monto mayor a 10000.
SELECT * FROM boleta WHERE monto > 10000;

-- Updates de tablas --

-- Se actualiza el precio del producto con id 1.
UPDATE producto
SET precio = 6000
WHERE id = 1;

-- Se da un aumento de sueldo al empleado con rut 87654321-2.
UPDATE empleado
SET sueldo_actual = 1200000
WHERE rut = '87654321-2';

-- Cambia el estado de la orden 2 a entregado.
UPDATE orden
SET estado = 'Entregado'
WHERE id = 2;

-- Deletes de registros --

-- Se elimina la linea de órden con id 1.
DELETE FROM linea_orden
WHERE id = 1;

-- Se elimina el cliente con rut 11111111-1 (No existe).
DELETE FROM cliente
WHERE rut = '11111111-1';

-- Subconsultas--

-- Dos tablas --

-- Selecciona todos los productos que están en una linea de órden.
SELECT p.* 
FROM producto p
WHERE p.id IN (
  SELECT lo.producto_id
  FROM linea_orden lo
);

-- Selecciona todos los productos preparados.
SELECT * 
FROM producto 
INNER JOIN tipo_producto ON producto.tipo_id = tipo_producto.id
WHERE tipo_producto.nombre = "Preparado";

-- Tres tablas --

-- Muestra el producto junto su tipo y sus ingredientes.
SELECT producto.nombre AS Producto, tipo_producto.nombre AS Tipo, ingrediente.nombre AS Ingrediente
FROM producto
INNER JOIN tipo_producto ON producto.tipo_id = tipo_producto.id
INNER JOIN ingrediente_por_producto ON producto.id = ingrediente_por_producto.producto_id
INNER JOIN ingrediente ON ingrediente_por_producto.ingrediente_id = ingrediente.id;

-- Muestra las órdenes con los datos de los clientes y el empleado que las maneja.
SELECT orden.id AS Orden, cliente.nombre AS Cliente, empleado.nombre1 || ' ' || empleado.apellido1 AS Empleado
FROM orden
INNER JOIN cliente ON orden.cliente_rut = cliente.rut
INNER JOIN empleado ON orden.empleado_rut = empleado.rut;

-- Cuatro tablas --

-- Muestra las órdenes, con sus respectivos productos, sus respectivos clientes, y el respectivo empleado a cargo.
SELECT orden.id AS Orden, producto.nombre AS Producto, cliente.nombre AS Cliente, empleado.nombre1 || ' ' || empleado.apellido1 AS Empleado
FROM orden
INNER JOIN linea_orden ON orden.id = linea_orden.orden_id
INNER JOIN producto ON linea_orden.producto_id = producto.id
INNER JOIN cliente ON orden.cliente_rut = cliente.rut
INNER JOIN empleado ON orden.empleado_rut = empleado.rut;

-- Vistas --

-- Ventas por producto.
CREATE VIEW ventas_producto AS
SELECT 
    producto.nombre AS producto, 
    SUM(linea_orden.cantidad) AS cantidad_vendida,
    SUM(linea_orden.cantidad * linea_orden.precio_unitario) AS ingresos_generados
FROM 
    producto 
JOIN 
    linea_orden ON producto.id = linea_orden.producto_id
GROUP BY 
    producto.nombre;
   
-- Muestra la productividad de los cajeros.
CREATE VIEW productividad_cajeros AS
SELECT 
    empleado.nombre1 AS nombre_empleado, 
    COUNT(orden.id) AS ordenes_manejadas
FROM 
    empleado
JOIN 
    orden ON empleado.rut = orden.empleado_rut
GROUP BY 
    empleado.nombre1;
   
-- Muestra la frecuencia de los clientes.
CREATE VIEW clientes_frecuentes AS
SELECT 
    cliente.nombre AS nombre_cliente, 
    COUNT(orden.id) AS ordenes_realizadas
FROM 
    cliente 
JOIN 
    orden ON cliente.rut = orden.cliente_rut
GROUP BY 
    cliente.nombre;



